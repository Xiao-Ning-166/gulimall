<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.gulimall</groupId>
    <artifactId>gulimall</artifactId>
    <version>1.0</version>

    <name>gulimall</name>
    <description>谷粒商城-顶级服务</description>
    <!-- 打出来的可以作为其他项目的maven依赖，在工程A中添加工程B的pom，A就可以使用B中的类。用在父级工程或聚合工程中。用来做jar包的版本控制。 -->
    <packaging>pom</packaging>

    <!--引入子服务 -->
    <modules>
        <module>gulimall-product</module>
        <module>gulimall-order</module>
        <module>gulimall-storage</module>
        <module>gulimall-member</module>
        <module>renren-generator</module>
        <module>gulimall-common</module>
        <!-- 后台管理服务 -->
        <module>gulimall-admin</module>
        <!-- 网关服务 -->
        <module>gulimall-gateway</module>
        <module>gulimall-third-module</module>
        <module>gulimall-coupon</module>
        <module>gulimall-api</module>
        <module>gulimall-search</module>
        <!-- 认证服务 -->
        <module>gulimall-auth</module>
    </modules>

    <properties>
        <gulimall.version>1.0</gulimall.version>
        <project.encoding>UTF-8</project.encoding>
        <maven-compiler-plugin.version>3.8.1</maven-compiler-plugin.version>

        <!-- 核心依赖 -->
        <spring.boot.version>2.6.3</spring.boot.version>
        <!-- SpringCloud 版本 -->
        <spring.cloud.version>2021.0.1</spring.cloud.version>
        <!-- Spring Cloud Alibaba 版本 -->
        <spring.cloud.alibaba.version>2021.0.1.0</spring.cloud.alibaba.version>

        <!-- 次要依赖 -->
        <mybatis.plus.version>3.4.2</mybatis.plus.version>
        <commons.lang.version>3.12.0</commons.lang.version>
        <minio.version>8.4.3</minio.version>
        <okhttp.version>4.9.3</okhttp.version>
        <hutool.version>5.8.5</hutool.version>
        <!-- swagger增强依赖 -->
        <knife4j.version>3.0.3</knife4j.version>
        <spring.javaformat.version>0.0.22</spring.javaformat.version>
        <elasticsearch.version>7.17.9</elasticsearch.version>
        <jakarta-json.version>2.0.1</jakarta-json.version>
        <jackson-databind.version>2.12.3</jackson-databind.version>
        <feign-okhttp.version>12.1</feign-okhttp.version>
        <redisson.version>3.20.1</redisson.version>
    </properties>

    <!-- 依赖版本管理 -->
    <dependencyManagement>
        <dependencies>
            <!-- 核心依赖 -->
            <!--springboot -->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>${spring.boot.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

            <!--Spring cloud -->
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring.cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

            <!-- Spring Cloud Alibaba -->
            <dependency>
                <groupId>com.alibaba.cloud</groupId>
                <artifactId>spring-cloud-alibaba-dependencies</artifactId>
                <version>${spring.cloud.alibaba.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

            <!-- 次要依赖 -->
            <!-- mybatis-plus -->
            <dependency>
                <groupId>com.baomidou</groupId>
                <artifactId>mybatis-plus-boot-starter</artifactId>
                <version>${mybatis.plus.version}</version>
            </dependency>

            <!-- 谷粒商城-公共模块-核心模块 -->
            <dependency>
                <groupId>com.gulimall</groupId>
                <artifactId>gulimall-common-core</artifactId>
                <version>${gulimall.version}</version>
            </dependency>

            <!-- 谷粒商城-公共模块-数据库配置模块 -->
            <dependency>
                <groupId>com.gulimall</groupId>
                <artifactId>gulimall-common-database</artifactId>
                <version>${gulimall.version}</version>
            </dependency>

            <!-- 谷粒商城-公共模块-缓存配置模块 -->
            <dependency>
                <groupId>com.gulimall</groupId>
                <artifactId>gulimall-common-cache</artifactId>
                <version>${gulimall.version}</version>
            </dependency>

            <!-- 分布式锁 -->
            <dependency>
                <groupId>org.redisson</groupId>
                <artifactId>redisson</artifactId>
                <version>${redisson.version}</version>
            </dependency>

            <!-- 谷粒商城-优惠服务-对内接口 -->
            <dependency>
                <groupId>com.gulimall</groupId>
                <artifactId>gulimall-api-coupon</artifactId>
                <version>${gulimall.version}</version>
            </dependency>

            <!-- 谷粒商城-商品服务-对内接口 -->
            <dependency>
                <groupId>com.gulimall</groupId>
                <artifactId>gulimall-api-product</artifactId>
                <version>${gulimall.version}</version>
            </dependency>

            <!-- 谷粒商城-搜索服务-对内接口 -->
            <dependency>
                <groupId>com.gulimall</groupId>
                <artifactId>gulimall-api-search</artifactId>
                <version>${gulimall.version}</version>
            </dependency>

            <!-- 谷粒商城-库存服务-对内接口 -->
            <dependency>
                <groupId>com.gulimall</groupId>
                <artifactId>gulimall-api-storage</artifactId>
                <version>${gulimall.version}</version>
            </dependency>

            <!-- 谷粒商城-会员服务-对内接口 -->
            <dependency>
                <groupId>com.gulimall</groupId>
                <artifactId>gulimall-api-member</artifactId>
                <version>${gulimall.version}</version>
            </dependency>

            <!-- commons-lang3 -->
            <dependency>
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-lang3</artifactId>
                <version>${commons.lang.version}</version>
            </dependency>

            <!-- minio对象存储 -->
            <dependency>
                <groupId>io.minio</groupId>
                <artifactId>minio</artifactId>
                <version>${minio.version}</version>
            </dependency>

            <dependency>
                <groupId>com.squareup.okhttp3</groupId>
                <artifactId>okhttp</artifactId>
                <version>${okhttp.version}</version>
            </dependency>

            <!-- hutool工具包 -->
            <dependency>
                <groupId>cn.hutool</groupId>
                <artifactId>hutool-all</artifactId>
                <version>${hutool.version}</version>
            </dependency>

            <!-- swagger增强依赖 -->
            <dependency>
                <groupId>com.github.xiaoymin</groupId>
                <artifactId>knife4j-micro-spring-boot-starter</artifactId>
                <version>${knife4j.version}</version>
            </dependency>
            <dependency>
                <groupId>com.github.xiaoymin</groupId>
                <artifactId>knife4j-spring-boot-starter</artifactId>
                <version>${knife4j.version}</version>
            </dependency>

            <!-- feign-okhttp -->
            <dependency>
                <groupId>io.github.openfeign</groupId>
                <artifactId>feign-okhttp</artifactId>
                <version>${feign-okhttp.version}</version>
            </dependency>



            <!-- Elasticsearch Java API Client -->
            <dependency>
                <groupId>co.elastic.clients</groupId>
                <artifactId>elasticsearch-java</artifactId>
                <version>${elasticsearch.version}</version>
                <exclusions>
                    <exclusion>
                        <groupId>org.elasticsearch.client</groupId>
                        <artifactId>elasticsearch-rest-client</artifactId>
                    </exclusion>
                </exclusions>
            </dependency>
            <dependency>
                <groupId>org.elasticsearch.client</groupId>
                <artifactId>elasticsearch-rest-client</artifactId>
                <version>${elasticsearch.version}</version>
            </dependency>
            <dependency>
                <groupId>com.fasterxml.jackson.core</groupId>
                <artifactId>jackson-databind</artifactId>
                <version>${jackson-databind.version}</version>
            </dependency>
            <dependency>
                <groupId>jakarta.json</groupId>
                <artifactId>jakarta.json-api</artifactId>
                <version>${jakarta-json.version}</version>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <!-- Lombok -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
        </dependency>

        <!-- 测试依赖 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <finalName>${project.name}</finalName>
        <pluginManagement>
            <plugins>
                <!--
                Spring Boot的Maven插件（Spring Boot Maven plugin）能够以Maven的方式为应用提供Spring Boot的支持，
                    即为Spring Boot应用提供了执行Maven操作的可能。
                Spring Boot Maven plugin能够将Spring Boot应用打包为可执行的jar或war文件，然后以通常的方式运行Spring Boot应用。

                Spring Boot Maven plugin的最主要goal就是repackage，其在Maven的package生命周期阶段，
                    能够将mvn package生成的软件包，再次打包为可执行的软件包，并将mvn package生成的软件包重命名为*.original。
                -->
                <plugin>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-maven-plugin</artifactId>
                    <version>${spring.boot.version}</version>
                    <executions>
                        <execution>
                            <goals>
                                <goal>repackage</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>
            </plugins>
        </pluginManagement>
        <plugins>
            <!--
                应用包装和空白约定的源格式器
                一个Checkstyle插件，可在整个代码库中实现一致性
            -->
            <plugin>
                <groupId>io.spring.javaformat</groupId>
                <artifactId>spring-javaformat-maven-plugin</artifactId>
                <version>${spring.javaformat.version}</version>
            </plugin>
            <!-- 指定maven编译的jdk版本，如果不指定，maven3默认用jdk1.5 maven2默认用jdk1.3 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${maven-compiler-plugin.version}</version>
                <configuration>
                    <source>${java.version}</source>
                    <target>${java.version}</target>
                    <encoding>${project.encoding}</encoding>
                </configuration>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <!--使用 mvn clean package -Pprod 进行激活prod环境的配置，否则激活默认环境-->
        <profile>
            <id>dev</id>
            <properties>
                <!-- 环境标识，需要与配置文件的名称相对应 -->
                <profiles.active>dev</profiles.active>
                <!--https://github.com/alibaba/nacos/issues/3460  默认的命名空间不要去设置namespace -->
                <nacos.namespace />
            </properties>
            <activation>
                <!-- 默认环境 -->
                <activeByDefault>true</activeByDefault>
            </activation>
        </profile>
        <profile>
            <id>test</id>
            <properties>
                <profiles.active>test</profiles.active>
                <nacos.namespace>x</nacos.namespace>
            </properties>
        </profile>
        <profile>
            <id>prod</id>
            <properties>
                <profiles.active>prod</profiles.active>
                <nacos.namespace>x</nacos.namespace>
            </properties>
        </profile>
    </profiles>

</project>
